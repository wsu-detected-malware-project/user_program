using DotNetEnv;

namespace user_program.Util
{
    public class MalwareChecker
    {
        private static Dictionary<string, bool> malwareLookup = new Dictionary<string, bool>();

        private static string MalwareListCsvPath = Env.GetString("MALWARELIST", Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "malwarelist.csv"));

        // 메모리에 악성코드 목록을 저장하지 않고 바로 비교하는 방식
        public static bool CheckMalwareInFiles(string peFilesCsvPath)
        {
            if (!File.Exists(MalwareListCsvPath))
            {
                MessageBox.Show("malwarelist.csv 파일이 존재하지 않습니다.\n악성코드 검사를 진행할 수 없습니다.", "파일 누락");
                return false;
            }

            if (!File.Exists(peFilesCsvPath))
            {
                Console.WriteLine($"PE 파일 목록 CSV 파일을 찾을 수 없습니다: {peFilesCsvPath}");
                return false;
            }

            // 1. 악성코드 목록을 Dictionary로 읽기
            Dictionary<string, bool> malwareLookup = new Dictionary<string, bool>();
            foreach (var line in File.ReadLines(MalwareListCsvPath).Skip(1)) // 첫 줄은 헤더니까 스킵
            {
                var parts = line.Split(',');
                if (parts.Length >= 2)
                {
                    string name = parts[0].Trim().ToLowerInvariant();
                    bool isMalware = parts[1].Trim() == "1";

                   if (!malwareLookup.ContainsKey(name))
                    {
                        malwareLookup.Add(name, isMalware);
                    }
                }
            }

            Console.WriteLine($"[MalwareChecker] {malwareLookup.Count}개의 악성코드 목록을 불러왔습니다.");

            // 2. PE 파일 목록의 Name 컬럼 인덱스를 찾아서 악성코드 여부 검사
            var lines = File.ReadLines(peFilesCsvPath).ToList();
            var headerParts = lines[0].Split(',');
            int nameColumnIndex = Array.FindIndex(headerParts, h => h.Trim().ToLowerInvariant() == "name");

            if (nameColumnIndex == -1)
            {
                Console.WriteLine("PE 파일 CSV에 'Name' 컬럼이 없습니다.");
                return false;
            }

            // 3. Name 컬럼 기준으로 비교 시작
            foreach (var line in lines.Skip(1)) // 데이터 줄
            {
                var parts = line.Split(',');
                if (parts.Length <= nameColumnIndex) continue;

                string fileName = parts[nameColumnIndex].Trim().ToLowerInvariant();

                if (!malwareLookup.ContainsKey(fileName))
                {
                    return true; // 목록에 없으면 무조건 악성
                }

                if (malwareLookup.TryGetValue(fileName, out bool isMalware) && isMalware)
                {
                    return true; // 하나라도 발견하면 바로 true
                }
            }

            return false; // 전부 정상
        }

        // 파일이 악성인지 검사
        public static bool IsMalware(string filePath)
        {
            string fileName = Path.GetFileName(filePath).ToLowerInvariant();

            if (malwareLookup.TryGetValue(fileName, out bool isMalware))
            {
                return isMalware;
            }

            return true; // 등록되지 않은 파일은 정상으로 간주
        }
    }
}